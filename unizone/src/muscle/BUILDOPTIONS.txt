muscled should compile fine with nothing more than a "make", but
if you feel like hacking around, here is a list of some 
compile-time constants that you can define in the CXXFLAGS variable
of your Makefile to alter muscle's behaviour:

-DMUSCLE_CATCH_SIGNALS_BY_DEFAULT
   If specified, ReflectServer will by default set up a signal 
   handler to catch signals (e.g. Control-C), and gracefully 
   exit its event loop when they are detected.  (Without this
   flag, that only happens if you call SetSignalHandlingEnabled(true)
   somewhere in your code)
 
-DMUSCLE_USE_LIBRT
   If specified, GetRunTime64() and Snooze64() will use librt's
   high-resolution timing functions instead of the low-resolution
   ones supplied by older operating systems.  Note that if you 
   specify this flag, you should link with librt as well (-lrt).

-DMUSCLE_USE_IPV6
   Set this to indicate that Muscle should be compiled to include IPv6
   support.  The main difference with this flag is that the muscle_ip_address
   typedef will be defined as a struct that holds 128 bits of data.  If
   this flag isn't defined (the default), than muscle_ip_address will be
   defined as a synonym for uint32 (for backwards compatibility with old code)

-DMUSCLE_ENABLE_MULTICAST_API
   Set this to make the multicast API calls in NetworkUtilityFunctions.h
   available for use.  (it's disabled by default to make sure that the
   multicast functions won't break the build on platforms that don't 
   support multicast).  Note that muscled itself won't use multicast even 
   if this constant is specified; the functions are a convenience for 
   other MUSCLE-based applications to use if they wish.

-DMUSCLE_64_BIT_PLATFORM
   Set this to indicate that compilation is being done on a 64-bit platform.
   This flag will be set automatically in support/MuscleSupport.h if defines
   indicating a known 64-bit platform are detected; if not, you can set it
   yourself in the Makefile if necessary.

-DMUSCLE_POOL_SLAB_SIZE
   This can be set to a number indicating the number of bytes that should be
   allocated in each "slab" of data malloc()'d by the ObjectPool class.  If left
   unset, slabs of approximately 8 kilobytes will be used.  Large slabs mean
   fewer memory allocations, but potentially more memory wasted if all the objects
   in the slabs aren't needed.  This value should be specified in bytes.

-DMUSCLE_USE_LLSEEK
   Force the FileDescriptorDataIO class to use the non-standard _llseek() command
   when compiled under Linux.  This should be done automatically in most cases
   where it is necessary, but you can force it also.

-DMUSCLE_PREFER_QT_OVER_WIN32
   Tell the Muscle Thread/Mutex/etc classes to prefer to use Qt Threading APIs over Win32 calls
   when both are available.  (By default, Win32 calls are preferred)

-DMUSCLE_ENABLE_MEMORY_PARANOIA=N 
   Put N overwrite-guards before and after each malloc() buffer, watch them for memory corruption

-DMUSCLE_SINGLE_THREAD_ONLY 
   Makes the Mutex class's methods compile down to no-ops.  Specify this if you can guarantee 
   your program will be single-threaded.

-DMUSCLE_NO_EXCEPTIONS 
   Tells muscle that exceptions won't be used.

-DMUSCLE_ENABLE_MEMORY_TRACKING 
   Enables system memory usage tracking (wrappers for new and delete that allow muscled to
   put an upper bound on the amount of memory it dynamically allocates, etc)

-DMUSCLE_AVOID_ASSERTIONS 
   makes MASSERT statements into no-ops

-DMUSCLE_AVOID_INLINE_ASSEMBLY
   tells muscle to use boring old C/C++ code and avoid using any clever assembly-language code

-DMUSCLE_ENABLE_ZLIB_ENCODING 
   enables support for zlib compression of Messages

-DMUSCLE_TRACE_CHECKPOINTS=N 
   enable TCHECKPOINT tracing of last N checkpoints

-DMUSCLE_DISABLE_MESSAGE_FIELD_POOLS 
   turn off Object pooling for Message field objects; helpful for debugging

-DMUSCLE_MAX_OUTPUT_CHUNK=N 
   tell muscled not to send() more than N bytes of output per call

-DMUSCLE_AVOID_NAMESPACES 
   make muscle source code namespace-free, for old compilers

-DMUSCLE_INLINE_LOGGING 
   turn Log(), LogTime(), etc into simple printf() passthroughs

-DMUSCLE_DISABLE_LOGGING 
   turn Log(), LogTime(), etc into no-ops

-DMUSCLE_USE_MUTEXES_FOR_ATOMIC_OPERATIONS 
   Use Mutexes to simulate atomic inc/dec operations; useful if no other method is available

-DMUSCLE_POWERPC_TIMEBASE_HZ=N 
   Use mftb/mftbu for GetRunTime64() calls.  N is the frequency at which the register is incremented

-DMUSCLE_USE_PTHREADS 
   Use pthreads for thread operations

-DMUSCLE_DEFAULT_TCP_STALL_TIMEOUT=N 
   Number of microseconds to wait for a client to read TCP data before 
   giving up and closing his connection (defaults to 20 minutes' worth)

-DMUSCLE_FD_SETSIZE=N 
   Redefine the fd_setsize to another value (useful under Windows, where the default setsize is a measly 64)

-DMUSCLE_CPU_REQUIRES_DATA_ALIGNMENT 
   Tell muscle that this CPU can't handle non-aligned integer data reads/writes (e.g. Sparc)

-DMUSCLE_AVOID_NEWNOTHROW 
   Turns newnothrow into a synonym for "new", instead of "new (nothrow)"

-DMUSCLE_AVOID_FORKPTY 
   Tells the ChildProcessDataIO class not to compile in calls to forkpty(); instead it will use fork() only

-DMUSCLE_CUSTOM_ATOMIC_TYPE 
   Use custom callback functions to implement atomic inc/dec

-DMUSCLE_HASHTABLE_DEFAULT_CAPACITY=X 
   Number of value slots to initially pre-allocate in a Hashtable, by default (defaults to 7)
   Note that the pre-allocation is done the first time an object is Put() into the Hashtable.
   A new, empty Hashtable will have no pre-allocated slots.

-DSMALL_QUEUE_SIZE=N
   Number of value slots to initially pre-allocate in a Queue, by default.  (defaults to 3)

-DSMALL_MUSCLE_STRING_LENGTH=N 
   strings <= this length will be stored inline in the String object to avoid a malloc()... default is 7

-DMUSCLE_USE_QUERYPERFORMANCECOUNTER
   Tells MUSCLE's GetRunTime64() to use the higher-resolution 
   QueryPerformanceCounter() API instead of timeGetTime() when running under Windows.
   Specifying this flag increases GetRunTime64()'s accuracy, but QueryPerformanceCounter()
   is known not to work on some hardware.
